/*
 * Author:        Sergey Kovalev
 * Last modified: 13.12.2019
 * Agenda:        Call-graph representation of Xen
 * Relates to:    f19af2f1138e89bdf05e8cfcab26a190e3771c4b
 * Keywords:      Xen, call-graph, graphviz
 */

digraph {
    subgraph cluster_xen {
        label="xen/"

        subgraph cluster_xen {
            label="xen/"

            subgraph cluster_arch {
                label="arch/"

                subgraph cluster_x86 {
                    label="x86/"

                    subgraph cluster_domctl_c {
                        label="domctl.c"

                        arch_do_domctl
                    } // domctl_c

                    subgraph cluster_hvm {
                        label="hvm/"

                        subgraph cluster_hypercall_c {
                            label="hypercall.c"

                            hvm_hypercall_table[shape="rect"]
                            hvm_hypercall -> hvm_hypercall_table[style="dotted"]
                        } // hypercall_c

                        subgraph cluster_hvm_c {
                            label="hvm.c"

                            hvm_debug_op
                            hvm_toggle_singlestep[tooltip="
Toggle the value of 'struct vcpu.arch.hvm.single_step'.
                            "]
                        } // hvm_c

                        subgraph monitor_c {
                            hvm_monitor_debug
                        } // monitor_c

                        subgraph cluster_vmx {
                            label="vmx/"

                            subgraph entry_s {
                                vmx_asm_vmexit_handler
                            } // entry_s

                            subgraph vmcs_c {
                                vmx_create_vmcs
                                construct_vmcs[color="gray"]
                            } // vmcs_c

                            subgraph vmx_c {
                                vmx_vmexit_handler
                            } // vmx_c

                            vmx_create_vmcs -> construct_vmcs
                            construct_vmcs -> vmx_asm_vmexit_handler[style="dotted", label="VMCS.HOST_RIP"]
                            vmx_asm_vmexit_handler -> vmx_vmexit_handler
                        } // vmx

                        vmx_vmexit_handler -> hvm_monitor_debug[label="debug exception"]
                        vmx_vmexit_handler -> hvm_monitor_debug[label="software breakpoint"]
                        vmx_vmexit_handler -> hvm_monitor_debug[label="singlestep breakpoint"]
                        vmx_vmexit_handler -> hvm_hypercall
                    } // hvm

                    subgraph cluster_mm {
                        label="mm/"

                        subgraph p2m_c {
                            p2m_altp2m_check // More about altp2m at [1]
                            p2m_switch_vcpu_altp2m_by_id

                            p2m_altp2m_check -> p2m_switch_vcpu_altp2m_by_id
                        } // p2m_c
                    } // mm

                    subgraph cluster_vm_event_c {
                        label="vm_event.c"

                        vm_event_toggle_singlestep -> hvm_toggle_singlestep
                        vm_event_fast_singlestep
                        vm_event_fill_regs
                    }

                    arch_do_domctl -> hvm_debug_op[label="switch (domctl->cmd): case XEN_DOMCTL_debug_on"]
                } // x86
            } // arch

            subgraph cluster_common {
                label="common/"

                subgraph cluster_domctl_c {
                    label="domctl.c"

                    do_domctl -> vm_event_domctl[label="XEN_DOMCTL_vm_event_op"]
                    do_domctl -> arch_do_domctl[label="switch (op->cmd): default"]
                } // domctl_c

                subgraph cluster_monitor_c {
                    label="monitor.c"

                    monitor_traps
                } // monitor_c

                subgraph cluster_vm_event_c {
                    label="vm_event.c"

                    vm_event_domctl
                    vm_event_resume[color="gray"]
                    vm_event_put_request
                    vm_event_vcpu_pause

                    vm_event_domctl -> vm_event_resume
                    vm_event_resume -> vm_event_toggle_singlestep
                    vm_event_resume -> p2m_altp2m_check
                } // vm_event_c
            } // common

            subgraph cluster_include {
                label="include/"

                subgraph cluster_public {
                    label="public/"

                    subgraph cluster_io {
                        label="io/"

                        subgraph cluster_ring_h {
                            label="ring.h"

                            ring_get_request[label="RING_GET_REQUEST"]
                            ring_get_response[label="RING_GET_RESPONSE"]
                            ring_push_responses[label="RING_PUSH_RESPONSES"]
                        } // ring_h
                    } // io

                    subgraph cluster_vm_event_h {
                        label="vm_event.h"

                        macro_vm_event_fast_singlestep[label="VM_EVENT_FAST_SINGLESTEP", shape="cds"]
                    } // vm_event_h
                } // public

                subgraph cluster_xen {
                    label="xen/"

                    subgraph cluster_sched_h {
                        label="sched.h"

                        struct_vcpu[label="struct vcpu", shape="rect"]
                    } // sched_h

                    subgraph cluster_asm_x86 {
                        label="asm_x86/"

                        subgraph cluster_hvm {
                            label="hvm/"

                            subgraph vcpu_h {
                                label="vcpu.h"

                                struct_hvm_vcpu[label="struct hvm_vcpu", shape="rect"]
                            } // vcpu_h
                        } // hvm

                        subgraph cluster_domain_h {
                            label="domain.h"

                            struct_arch_vcpu[label="struct arch_vcpu", shape="rect"]
                        } // domain_h
                    } // asm_x86

                    struct_vcpu->struct_arch_vcpu
                    struct_arch_vcpu->struct_hvm_vcpu
                } // xen
            } // include

            hvm_hypercall_table -> do_domctl[style="dotted", label="HYPERCALL(domctl)"]
            hvm_toggle_singlestep -> struct_hvm_vcpu[label="hvm_vcpu.single_step"]
            hvm_monitor_debug -> monitor_traps
            monitor_traps -> vm_event_fill_regs
            monitor_traps -> vm_event_put_request
            monitor_traps -> vm_event_vcpu_pause
        } // xen

        subgraph cluster_tools {
            subgraph cluster_libs {
                label="libs"

                subgraph call {
                    subgraph core_c {
                        xencall0 -> osdep_hypercall
                        xencall1 -> osdep_hypercall
                        xencall2 -> osdep_hypercall
                        xencall3 -> osdep_hypercall
                        xencall4 -> osdep_hypercall
                        xencall5 -> osdep_hypercall
                    }

                    subgraph linux_c {
                        osdep_hypercall
                    }
                }
            } // libs

            subgraph cluster_libxc {
                label="libxc"

                subgraph xc_private_h {
                    do_domctl_[label="do_domctl"]
                    do_domctl_ -> do_domctl_maybe_retry_efault
                    do_domctl_maybe_retry_efault -> xencall1[label="__HYPERVISOR_domctl"]
                } // xc_private_h
            } // libxc
        } // tools
    } // xen

    osdep_hypercall -> ioctl
    ioctl -> vmx_asm_vmexit_handler[label="hypercall", style="dashed"]

    subgraph cluster_libvmi {
        label="libvmi/libvmi/"

        subgraph cluster_driver {
            label="driver/"

            subgraph cluster_xen {
                label="xen/"

                subgraph xen_events_private_h {
                    event_response_conversion[label="int event_response_conversion[]", shape="rect"]
                } // xen_events_private_h
                subgraph xen_events_c {
                    xen_start_single_step
                    process_response[tooltip="
Fill vm event response structure (struct vm_event_compat_t).
Set flags and altp2m index.
Flags are converted from VMI_EVENT_* to VM_EVENT_*.
Altp2m index is filled from slat_id.
                    "]
                    ring_get_request_and_response_412[tooltip="
Get address of ring buffer elements for request and response.
                    "]
                    ring_get_request_and_response_412->ring_get_request
                    ring_get_request_and_response_412->ring_get_response
                    xen_events_listen->process_requests_412[label="xen_events_t->process_requests", style="dashed"]
                    process_requests_412->ring_get_request_and_response_412
                    process_requests_412->process_requests
                    process_requests_412->ring_push_responses
                    process_requests->process_software_breakpoint[label="xen_events_t->process_event[VM_EVENT_REASON_SOFTWARE_BREAKPOINT]", style="dashed"]
                    process_software_breakpoint->process_response[label="process_response(vmi_event_t->callback(),vmi_event_t*,vm_event_compat_t*)"]
                    process_response->event_response_conversion[style="dotted"]
                } // xen_events_c
            }

            subgraph driver_interface_h {
                struct_driver_interface[label="struct driver_interface", shape="rect"]
            } // driver_interface_h

            subgraph driver_wrapper_h {
                driver_start_single_step
                driver_events_listen
            } // driver_wrapper_h

            struct_driver_interface->xen_start_single_step[label="start_single_step_ptr", style="dotted"]
            driver_start_single_step->struct_driver_interface[label="start_single_step_ptr", style="dotted"]
            driver_events_listen->struct_driver_interface[label="events_listen_ptr", style="dotted"]
            struct_driver_interface->xen_events_listen[label="events_listen_ptr", style="dotted"]
        } // driver

        subgraph cluster_accessors_c {
            label="accessors.c"

            vmi_pause_vm
            vmi_resume_vm
        } // accessors_c

        subgraph cluster_events_c {
            label="events.c"

            register_singlestep_event
            vmi_register_event->register_singlestep_event
            vmi_step_event->register_singlestep_event
            vmi_events_listen->driver_events_listen
        } // events_c

        subgraph cluster_private_h {
            label="private.h"

            struct_vmi_instance[label="struct vmi_instance", shape="rect"]
        } // private_h

        struct_vmi_instance->struct_driver_interface
        register_singlestep_event->driver_start_single_step
    } // libvmi

    subgraph cluster_drakvuf {
        label="drakvuf/src/"

        subgraph cluster_libdrakvuf {
            label="libdrakvuf/"

            subgraph cluster_vmi_c {
                label="vmi.c"

                init_vmi->vmi_register_event[label="drakvuf->step_event"]
                init_vmi->vmi_reset_trap[label="SINGLE_STEP_EVENT(..., callback, ...)", style="dotted"]
                drakvuf_loop->drakvuf_poll
                drakvuf_poll->drakvuf_vmi_event_callback
                drakvuf_vmi_event_callback->vmi_events_listen
                process_software_breakpoint->int3_cb[label="vmi_event_t->callback", style="dashed"]
                int3_cb->process_software_breakpoint[label="VMI_EVENT_RESPONSE_TOGGLE_SINGLESTEP | VMI_EVENT_RESPONSE_VMM_PAGETABLE_ID; (OUT event_t *event)->slat_id=0", style="bold"]
            } // vmi_c
        } // libdrakvuf
    } // drakvuf

    subgraph {
        vm[style="invis"]

        vm -> vmx_asm_vmexit_handler[label="1", tooltip="EXIT_REASON_EXCEPTION_NMI; vector=TRAP_int3", color="blue"]
        vmx_asm_vmexit_handler -> vmx_vmexit_handler[label="2", color="blue"]
        vmx_vmexit_handler -> hvm_monitor_debug[label="3", color="blue"]
        hvm_monitor_debug -> monitor_traps[label="4", tooltip="HVM_MONITOR_SOFTWARE_BREAKPOINT", color="blue"]
        monitor_traps -> vm_event_vcpu_pause[label="5", color="blue"]
        monitor_traps -> vm_event_fill_regs[label="6", color="blue"]
        monitor_traps -> vm_event_put_request[label="7", color="blue"]
        vmx_asm_vmexit_handler -> drakvuf_poll[label="8", color="blue", style="dashed", tooltip="nvmx_switch_guest()?"]
        drakvuf_poll -> int3_cb[label="9", color="blue", style="dashed", tooltip="skip obvious part of the path"]
        
    } // int3 handling

    subgraph cluster_legend {
        label="Legend"
 
        static_function[label="static function", color="gray"]
        data_structure[label="data structure", shape="rect"]
        macro[label="preprocessor definition", shape="cds"]

        a[style="invis"]
        b[style="invis"]
        c[style="invis"]
        d[style="invis"]
        e[style="invis"]
        f[style="invis"]
        g[style="invis"]
        h[style="invis"]
        i[style="invis"]
        j[style="invis"]
        k[style="invis"]
        l[style="invis"]

        a -> b
        c -> d[label="indirect call", style="dashed"]
        g -> h[label="use address of", style="dotted"]
        i -> j[label="int3 handling sequence", color="blue"]
        k -> l[label="return VALUE to" style="bold"]
    } // legend
}

/*
 * Resources:
 * 1. STEALTHY MONITORING WITH XEN ALTP2M - https://xenproject.org/2016/04/13/stealthy-monitoring-with-xen-altp2m/
 */
